import api.Entities.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

/**
 * Κλάση που περιέχει διάφορες δοκιμαστικές test συναρτήσεις για τον έλεγχο ορθής λειτουργικότητας για τις παραγγελίες.
 */
public class OrderTest {

    private Cart cart;

    @BeforeEach
    void setUp() {
        SubCategory fruitSubCategory = new SubCategory("Fruit");
        Category foodCategory = new Category("Food", List.of(fruitSubCategory));

        // Δημιουργία ενός καλαθιού με προϊόντα έτοιμα για παραγγελία
        cart = new Cart();
        cart.addProduct(new WeightProduct("Apple", "Super fresh!",foodCategory,new BigDecimal("1.50"), 20.5), 10.5);
        cart.addProduct(new WeightProduct("Apple", "Super fresh!",foodCategory,new BigDecimal("1.50"), 20.5), 5.5);
        cart.addProduct(new WeightProduct("Apple", "Super fresh!",foodCategory,new BigDecimal("1.50"), 20.5), 1.5);
    }

    /**
     * Έλεγχος για το εάν τα IDs της παραγγελίας αυξάνονται σωστά κάθε φορά.
     */
    @Test
    void testOrderAutoGeneratedID() {
        Order order1 = new Order("user1", cart);
        Order order2 = new Order("user2", cart);

        assertNotEquals(order1.getOrderId(), order2.getOrderId(), "Order IDs should have been incremented!");
    }

    /**
     * Έλεγχος για το τελικό ποσό της παραγγελίας.
     */
    @Test
    void testOrderTotalCost() {
        // Dummy παραγγελία
        Order order = new Order("user1", cart);

        // Σύγκριση με τον τελεστή compareTo για να αποφύγουμε τα trailing zeros του BigDecimal
        assertEquals(0, BigDecimal.valueOf(1.5 * (10.5 + 5.5 + 1.5)).compareTo(order.getTotalCost()), "Total cost not calculated correctlty");
    }

    /**
     * Έλεγχος για το εάν τα προϊόντα της παραγγελίας προστήθονται ορθά στην παραγγελία από το καλάθι.
     */
    @Test
    void testOrderContainsItemsCorrectly() {
        // Dummy παραγγελία
        Order order = new Order("user1", cart);

        // Παίρνουμε τα προϊόντα απο παραγγελία και απο το actual καλάθι
        Map<Product, Number> cartItems = cart.getItems();
        Map<Product, Number> orderItems = order.getCart().getItems();

        // Ελέγχουμε αν το πλήθος των προϊόντων είναι ίδιο σε κάθε περίπτωση
        assertEquals(cart.getItems().size(), order.getCart().getItems().size(), "Order doesnt contain the correct items...");

        // Έλεγχος αν τα προϊόντα της παραγγελίας είναι ίδια με αυτά του καλαθιού
        for (Product product : cartItems.keySet()) {
            assertTrue(orderItems.containsKey(product), "Missing product!");
            assertEquals(product.getTitle(), product.getTitle(), "Wrong title of products");
            assertEquals(product.getPrice(), product.getPrice(), "Wrong prices");
            assertEquals(cartItems.get(product), orderItems.get(product), "Quantities are wrong...");
        }

    }

}
